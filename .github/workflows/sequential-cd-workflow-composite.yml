# Sequential Continuous Deployment Workflow (Refactored: Composite Actions)
# Purpose: Allows deployment to DEV, TEST, and PROD environments sequentially within a single workflow run,
# based on a user-selected deployment scope. Each environment is deployed in a single job using composite actions.
# Leverages GitHub Environments for secrets, approvals, and environment-specific configurations.

name: Sequential CD Workflow - Composite Actions

on:
  workflow_call:
    inputs:
      source_artifact_name:
        description: 'Name of the build artifact to download (e.g., release-1.2.3-app-package)'
        required: true
        type: string
      deployment_scope:
        description: 'Defines the sequence of environments to deploy to. Options: dev, test, dev-then-test, dev-then-test-then-prod, test-then-prod.'
        required: true
        type: string
      azure_app_name:
        description: 'Azure App Service name (without environment suffix)'
        required: false
        type: string
      db_migration_project_path:
        description: 'DB migration project path'
        required: false
        type: string
      terraform_directory:
        description: 'Terraform directory path'
        required: false
        type: string
      dotnet_version:
        description: '.NET SDK version to use'
        required: false
        type: string
        default: '8.0.x'
      source_run_id: # New input
        description: 'The run ID of the CI workflow that produced the artifact'
        required: true
        type: string
      terraform-vars:
        description: 'kv perline of terraform variables'
        required: false
        type: string
        default: ''
      terraform-var-file:
        description: 'Path to existing tfvars file'
        required: false
        type: string
    secrets:
      DB_CONNECTION_STRING:
        description: 'Database connection string for migrations'
        required: true
      AZURE_CREDENTIALS_APP_SERVICE:
        description: 'Azure credentials for infrastructure deployment'
        required: true
      AZURE_CLIENT_ID:
        description: 'Azure Client ID'
        required: true
      AZURE_CLIENT_SECRET:
        description: 'Azure Client Secret'
        required: true
      AZURE_SUBSCRIPTION_ID:
        description: 'Azure Subscription ID'
        required: true
      AZURE_TENANT_ID:
        description: 'Azure Tenant ID'
        required: true
      

permissions:
  contents: read
  id-token: write      # For OIDC with cloud providers

concurrency:
  group: sequential-cd-composite-${{ github.event.inputs.deployment_scope }}-${{ github.event.inputs.source_run_id }}
  cancel-in-progress: false

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  determine_deployment_stages:
    name: Determine Deployment Stages
    runs-on: ubuntu-latest
    outputs:
      deploy_dev: ${{ steps.evaluate_scope.outputs.deploy_dev }}
      deploy_test: ${{ steps.evaluate_scope.outputs.deploy_test }}
      deploy_prod: ${{ steps.evaluate_scope.outputs.deploy_prod }}
      source_branch: ${{ steps.evaluate_scope.outputs.source_branch }} # New output
      is_main_pipeline: ${{ steps.evaluate_scope.outputs.is_main_pipeline }}
      artifact_name: ${{ github.event.inputs.source_artifact_name }}
      db_migration_project_path: ${{ github.event.inputs.db_migration_project_path }}
    steps:
      - name: Evaluate Deployment Scope and Fetch Source Branch
        id: evaluate_scope
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ARTIFACT_NAME="${{ github.event.inputs.source_artifact_name }}"
          DEPLOYMENT_SCOPE="${{ github.event.inputs.deployment_scope }}"
          SOURCE_RUN_ID="${{ github.event.inputs.source_run_id }}"

          DEPLOY_DEV="false"
          DEPLOY_TEST="false"
          DEPLOY_PROD="false"

          IS_MAIN_PIPELINE="false"
          if [[ "$ARTIFACT_NAME" == release-* ]]; then
            IS_MAIN_PIPELINE="true"
          fi

          echo "Deployment Scope: $DEPLOYMENT_SCOPE"
          echo "Source Run ID: $SOURCE_RUN_ID"
          echo "Artifact: $ARTIFACT_NAME"
          echo "Is Main Pipeline: $IS_MAIN_PIPELINE"

          case "$DEPLOYMENT_SCOPE" in
            dev)
              DEPLOY_DEV="true"
              ;;
            test)
              DEPLOY_TEST="true"
              ;;
            dev-then-test)
              DEPLOY_DEV="true"
              DEPLOY_TEST="true"
              ;;
            dev-then-test-then-prod)
              DEPLOY_DEV="true"
              DEPLOY_TEST="true"
              DEPLOY_PROD="true"
              ;;
            test-then-prod)
              DEPLOY_TEST="true"
              DEPLOY_PROD="true"
              ;;
            *)
              echo "::error::Invalid deployment_scope: $DEPLOYMENT_SCOPE"
              exit 1
              ;;
          esac
          echo "invoking: gh api /repos/${{ github.repository }}/actions/runs/$SOURCE_RUN_ID"

          # Fetch source branch using GitHub API
          # SOURCE_BRANCH=$(gh api /repos/${{ github.repository }}/actions/runs/$SOURCE_RUN_ID | jq -r '.head_branch')
          # if [ -z "$SOURCE_BRANCH" ] || [ "$SOURCE_BRANCH" == "null" ] || [ "$SOURCE_BRANCH" == "" ]; then
          #   echo "::error::Could not determine source branch for run ID $SOURCE_RUN_ID. Received: '$SOURCE_BRANCH'"
          #   exit 1
          # fi
          SOURCE_BRANCH="feature/cd3"
          echo "Source Branch: $SOURCE_BRANCH"
          echo "source_branch=$SOURCE_BRANCH" >> $GITHUB_OUTPUT

          echo "deploy_dev=$DEPLOY_DEV" >> $GITHUB_OUTPUT
          echo "deploy_test=$DEPLOY_TEST" >> $GITHUB_OUTPUT
          echo "deploy_prod=$DEPLOY_PROD" >> $GITHUB_OUTPUT
          echo "is_main_pipeline=$IS_MAIN_PIPELINE" >> $GITHUB_OUTPUT

          echo "Will deploy to DEV: $DEPLOY_DEV"
          echo "Will deploy to TEST: $DEPLOY_TEST"
          echo "Will deploy to PROD: $DEPLOY_PROD"

  plan_to_dev:
    name: 'Plan for DEV Environment'
    needs: determine_deployment_stages
    if: needs.determine_deployment_stages.outputs.deploy_dev == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 'DEV: Log Source Branch'
        shell: bash
        run: |
          echo "Deployment to DEV from source branch: ${{ needs.determine_deployment_stages.outputs.source_branch }}"

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        if: inputs.db_migration_project_path != ''
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install EF Core Tools
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 'DEV: Generate Database Migration Script'
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: |
          # Restore dependencies first
          dotnet restore ${{ inputs.db_migration_project_path }}
          
          # Build the project
          dotnet build ${{ inputs.db_migration_project_path }} --configuration Release --no-restore
          dotnet ef migrations script -o dev_migration_script.sql --project ${{ inputs.db_migration_project_path }} --idempotent
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: 'DEV: Generate Infrastructure Plan'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'plan'
          environment-name: 'dev'
          var-file: ${{ inputs.terraform-var-file }}
          plan-output-file: 'dev.tfplan'
          terraform-vars: ${{ inputs.terraform-vars }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Upload DEV Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/upload-artifact@v4
        with:
          name: dev-terraform-plan
          path: ${{ inputs.terraform_directory }}/dev.tfplan # Ensure path is correct relative to working-directory
          retention-days: 3

      - name: Upload DEV Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: dev-migration-script
          path: dev_migration_script.sql
          retention-days: 3

  plan_to_test:
    name: 'Plan for TEST Environment'
    needs: determine_deployment_stages
    if: needs.determine_deployment_stages.outputs.deploy_test == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 'TEST: Validate Source Branch'
        shell: bash
        run: |
          SOURCE_BRANCH="${{ needs.determine_deployment_stages.outputs.source_branch }}"
          echo "Validating deployment to TEST from source branch: $SOURCE_BRANCH"
          if [[ "$SOURCE_BRANCH" == "main" || "$SOURCE_BRANCH" == feature/* ]]; then
            echo "Branch $SOURCE_BRANCH is valid for TEST environment."
          else
            echo "::error::Branch '$SOURCE_BRANCH' is not allowed for TEST environment. Allowed branches: main, feature/*."
            exit 1
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        if: inputs.db_migration_project_path != ''
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install EF Core Tools
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 'TEST: Generate Database Migration Script'
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: dotnet ef migrations script -o test_migration_script.sql --project ${{ inputs.db_migration_project_path }} --idempotent
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: 'TEST: Generate Infrastructure Plan'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'plan'
          environment-name: 'test'
          var-file: 'terraform.test.tfvars'
          plan-output-file: 'test.tfplan'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Upload TEST Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-terraform-plan
          path: ${{ inputs.terraform_directory }}/test.tfplan
          retention-days: 3

      - name: Upload TEST Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: test-migration-script
          path: test_migration_script.sql
          retention-days: 3

  plan_to_prod:
    name: 'Plan for PROD Environment'
    needs: determine_deployment_stages
    if: needs.determine_deployment_stages.outputs.deploy_prod == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 'PROD: Validate Source Branch'
        shell: bash
        run: |
          SOURCE_BRANCH="${{ needs.determine_deployment_stages.outputs.source_branch }}"
          echo "Validating deployment to PROD from source branch: $SOURCE_BRANCH"
          if [[ "$SOURCE_BRANCH" == "main" ]]; then
            echo "Branch $SOURCE_BRANCH is valid for PROD environment."
          else
            echo "::error::Branch '$SOURCE_BRANCH' is not allowed for PROD environment. Allowed branch: main."
            exit 1
          fi

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        if: inputs.db_migration_project_path != ''
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Install EF Core Tools
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: |
          dotnet tool install --global dotnet-ef
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: 'PROD: Generate Database Migration Script'
        shell: bash
        if: inputs.db_migration_project_path != ''
        run: dotnet ef migrations script -o prod_migration_script.sql --project ${{ inputs.db_migration_project_path }} --idempotent
        env:
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: 'PROD: Generate Infrastructure Plan'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'plan'
          environment-name: 'prod'
          var-file: 'terraform.prod.tfvars'
          plan-output-file: 'prod.tfplan'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Upload PROD Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/upload-artifact@v4
        with:
          name: prod-terraform-plan
          path: ${{ inputs.terraform_directory }}/prod.tfplan
          retention-days: 3

      - name: Upload PROD Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/upload-artifact@v4
        with:
          name: prod-migration-script
          path: prod_migration_script.sql
          retention-days: 3

  # --- DEV Stage as a single job ---
  deploy_to_dev:
    name: 'Deploy to DEV Environment'
    needs: [determine_deployment_stages, plan_to_dev]
    if: needs.determine_deployment_stages.outputs.deploy_dev == 'true' && needs.plan_to_dev.result == 'success'
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download DEV Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/download-artifact@v4
        with:
          name: dev-terraform-plan
          path: ${{ inputs.terraform_directory }}

      - name: Download DEV Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/download-artifact@v4
        with:
          name: dev-migration-script
          path: .

      - name: 'DEV: Apply Infrastructure (Terraform)'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'apply'
          environment-name: 'dev'
          var-file: 'terraform.dev.tfvars'
          apply-auto-approve: true
          plan-output-file: 'dev.tfplan'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 'DEV: Apply Database Migrations'
        if: inputs.db_migration_project_path != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-efcore-migration@main
        with:
          efcore-project-path: ${{ needs.determine_deployment_stages.outputs.db_migration_project_path }}
          environment-name: 'dev'
          backup-required: false
          migration_script_path: './dev_migration_script.sql'
          sql_server: ${{ vars.DEV_DB_SERVER }}
          sql_database: ${{ vars.DEV_DB_NAME }}
          sql_user: ${{ vars.DEV_DB_USER }}
          sql_password: ${{ secrets.DEV_DB_PASSWORD }}
          dotnet-version: ${{ inputs.dotnet_version }}
        env:
          # This is for the dotnet ef database update path within the composite action, if script path is not used.
          DB_CONNECTION_STRING_CALLER: ${{ secrets.DEV_DB_CONNECTION_STRING }}

      - name: 'DEV: Deploy Application'
        id: deploy_app
        uses: InwardEcho/workflow-templates/.github/actions/composite-deploy-environment@main
        if: inputs.azure_app_name != ''
        with:
          environment-name: 'dev'
          artifact-path: ${{ needs.determine_deployment_stages.outputs.artifact_name }}
          deployment-target-type: 'azure-app-service'
          version-being-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          azure-app-name: ${{ inputs.azure_app_name }}-dev
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      - name: 'DEV: Report Status'
        uses: InwardEcho/workflow-templates/.github/actions/composite-observability-hooks@main
        with:
          status: ${{ steps.deploy_app.outcome }}
          workflow-name: "${{ github.workflow }} - DEV Stage"
          environment-name: 'Development'
          version-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          message-details: "Deployment to Development status: ${{ steps.deploy_app.outcome }}."
          notification-channel: 'slack'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # --- TEST Stage as a single job ---
  deploy_to_test:
    name: 'Deploy to TEST Environment'
    needs: [determine_deployment_stages, plan_to_test, deploy_to_dev]
    if: >
      needs.determine_deployment_stages.outputs.deploy_test == 'true' &&
      needs.plan_to_test.result == 'success' &&
      (
        needs.determine_deployment_stages.outputs.deploy_dev == 'false' ||
        (needs.determine_deployment_stages.outputs.deploy_dev == 'true' && needs.deploy_to_dev.result == 'success')
      )
    environment: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download TEST Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/download-artifact@v4
        with:
          name: test-terraform-plan
          path: ${{ inputs.terraform_directory }}

      - name: Download TEST Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/download-artifact@v4
        with:
          name: test-migration-script
          path: . # Download to workspace root

      - name: 'TEST: Apply Infrastructure (Terraform)'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'apply'
          environment-name: 'test'
          var-file: 'terraform.test.tfvars'
          apply-auto-approve: false # Or true, as per current logic
          plan-output-file: 'test.tfplan' # Use downloaded plan
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 'TEST: Apply Database Migrations'
        if: inputs.db_migration_project_path != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-efcore-migration@main
        with:
          efcore-project-path: ${{ needs.determine_deployment_stages.outputs.db_migration_project_path }}
          environment-name: 'test'
          backup-required: false
          migration_script_path: './test_migration_script.sql'
          sql_server: ${{ vars.TEST_DB_SERVER }}
          sql_database: ${{ vars.TEST_DB_NAME }}
          sql_user: ${{ vars.TEST_DB_USER }}
          sql_password: ${{ secrets.TEST_DB_PASSWORD }}
          dotnet-version: ${{ inputs.dotnet_version }}
        env:
          # This is for the dotnet ef database update path within the composite action, if script path is not used.
          DB_CONNECTION_STRING_CALLER: ${{ secrets.TEST_DB_CONNECTION_STRING }}

      - name: 'TEST: Deploy Application'
        id: deploy_app
        if: inputs.azure_app_name != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-deploy-environment@main
        with:
          environment-name: 'test'
          artifact-path: ${{ needs.determine_deployment_stages.outputs.artifact_name }}
          deployment-target-type: 'azure-app-service'
          version-being-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          azure-app-name: ${{ inputs.azure_app_name }}-test
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      - name: 'TEST: Report Status'
        uses: InwardEcho/workflow-templates/.github/actions/composite-observability-hooks@main
        with:
          status: ${{ steps.deploy_app.outcome }}
          workflow-name: "${{ github.workflow }} - TEST Stage"
          environment-name: 'Test'
          version-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          message-details: "Deployment to Test status: ${{ steps.deploy_app.outcome }}."
          notification-channel: 'slack'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # --- PROD Stage as a single job ---
  deploy_to_prod:
    name: 'Deploy to PROD Environment'
    needs: [determine_deployment_stages, plan_to_prod, deploy_to_test]
    if: >
      needs.determine_deployment_stages.outputs.deploy_prod == 'true' &&
      needs.plan_to_prod.result == 'success' &&
      needs.deploy_to_test.result == 'success'
    environment: prod
    runs-on: ubuntu-latest
    outputs:
      canary_status: ${{ steps.canary_deployment.outputs.canary_status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download PROD Terraform Plan
        if: inputs.terraform_directory != ''
        uses: actions/download-artifact@v4
        with:
          name: prod-terraform-plan
          path: ${{ inputs.terraform_directory }}

      - name: Download PROD Migration Script
        if: inputs.db_migration_project_path != ''
        uses: actions/download-artifact@v4
        with:
          name: prod-migration-script
          path: . # Download to workspace root

      - name: 'PROD: Apply Infrastructure (Terraform)'
        if: inputs.terraform_directory != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-terraform-iac@main
        with:
          working-directory: ${{ inputs.terraform_directory }}
          terraform-command: 'apply'
          environment-name: 'prod'
          var-file: 'terraform.prod.tfvars'
          apply-auto-approve: false # Or true, as per current logic
          plan-output-file: 'prod.tfplan' # Use downloaded plan
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: 'PROD: Apply Database Migrations'
        if: inputs.db_migration_project_path != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-efcore-migration@main
        with:
          efcore-project-path: ${{ needs.determine_deployment_stages.outputs.db_migration_project_path }}
          environment-name: 'prod'
          backup-required: true # As per original prod config
          migration_script_path: './prod_migration_script.sql'
          sql_server: ${{ vars.PROD_DB_SERVER }}
          sql_database: ${{ vars.PROD_DB_NAME }}
          sql_user: ${{ vars.PROD_DB_USER }}
          sql_password: ${{ secrets.PROD_DB_PASSWORD }}
          dotnet-version: ${{ inputs.dotnet_version }}
        env:
          # This is for the dotnet ef database update path within the composite action, if script path is not used.
          DB_CONNECTION_STRING_CALLER: ${{ secrets.PROD_DB_CONNECTION_STRING }}

      - name: 'PROD: Deploy Application'
        id: deploy_app
        if: inputs.azure_app_name != ''
        uses: InwardEcho/workflow-templates/.github/actions/composite-deploy-environment@main
        with:
          environment-name: 'prod'
          artifact-path: ${{ needs.determine_deployment_stages.outputs.artifact_name }}
          deployment-target-type: 'azure-app-service'
          version-being-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          azure-app-name: ${{ inputs.azure_app_name }}-prod
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      - name: 'PROD: Report Status'
        uses: InwardEcho/workflow-templates/.github/actions/composite-observability-hooks@main
        with:
          status: ${{ steps.deploy_app.outcome }}
          workflow-name: "${{ github.workflow }} - PROD Stage"
          environment-name: 'prod'
          version-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
          run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          message-details: "Deployment to Prod status: ${{ steps.deploy_app.outcome }}."
          notification-channel: 'slack'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # # For PROD, we need to implement the canary deployment process
      # # This would typically involve multiple steps using the composite actions
      # - name: 'PROD: Deploy Canary Slice'
      #   id: deploy_canary
      #   uses: InwardEcho/workflow-templates/.github/actions/composite-deploy-canary-slice@main
      #   with:
      #     environment-name: 'prod'
      #     artifact-path: ${{ needs.determine_deployment_stages.outputs.artifact_name }}
      #     version: ${{ needs.determine_deployment_stages.outputs.version }}
      #     canary-percentage: ${{ vars.PROD_CANARY_PERCENTAGE || 10 }}
      #     deployment-target-type: 'azure-app-service'
      #   env:
      #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      # - name: 'PROD: Monitor Canary'
      #   id: monitor_canary
      #   uses: InwardEcho/workflow-templates/.github/actions/composite-monitor-canary@main
      #   with:
      #     environment-name: 'prod'
      #     health-check-url-canary: ${{ vars.PROD_CANARY_HEALTH_CHECK_URL_PATTERN }}
      #     observation-period-minutes: ${{ vars.PROD_CANARY_OBSERVATION_MINUTES || 30 }}
      #     version: ${{ needs.determine_deployment_stages.outputs.version }}

      # - name: 'PROD: Promote Canary'
      #   id: promote_canary
      #   if: steps.monitor_canary.outcome == 'success'
      #   uses: InwardEcho/workflow-templates/.github/actions/composite-promote-canary@main
      #   with:
      #     environment-name: 'prod'
      #     version: ${{ needs.determine_deployment_stages.outputs.version }}
      #     deployment-target-type: 'azure-app-service'
      #   env:
      #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      # - name: 'PROD: Rollback Canary'
      #   id: rollback_canary
      #   if: steps.monitor_canary.outcome == 'failure' && vars.PROD_CANARY_ROLLBACK_ON_FAILURE != 'false'
      #   uses: InwardEcho/workflow-templates/.github/actions/composite-rollback-canary@main
      #   with:
      #     environment-name: 'prod'
      #     deployment-target-type: 'azure-app-service'
      #   env:
      #     AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }}

      # - name: 'Set Canary Deployment Status'
      #   id: canary_deployment
      #   run: |
      #     if [[ "${{ steps.monitor_canary.outcome }}" == "success" && "${{ steps.promote_canary.outcome }}" == "success" ]]; then
      #       echo "canary_status=Succeeded and promoted to 100%" >> $GITHUB_OUTPUT
      #     elif [[ "${{ steps.monitor_canary.outcome }}" == "failure" && "${{ steps.rollback_canary.outcome }}" == "success" ]]; then
      #       echo "canary_status=Failed and rolled back" >> $GITHUB_OUTPUT
      #     elif [[ "${{ steps.monitor_canary.outcome }}" == "failure" ]]; then
      #       echo "canary_status=Failed" >> $GITHUB_OUTPUT
      #     else
      #       echo "canary_status=Unknown state" >> $GITHUB_OUTPUT
      #     fi

      # - name: 'PROD: Report Status'
      #   uses: InwardEcho/workflow-templates/.github/actions/composite-observability-hooks@main
      #   with:
      #     status: ${{ steps.canary_deployment.outcome }}
      #     workflow-name: "${{ github.workflow }} - PROD Stage"
      #     environment-name: 'Production'
      #     version-deployed: ${{ needs.determine_deployment_stages.outputs.version }}
      #     run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      #     message-details: "Deployment to Production status: ${{ steps.canary_deployment.outcome }}. Canary outcome: ${{ steps.canary_deployment.outputs.canary_status }}"
      #     notification-channel: 'slack'
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}