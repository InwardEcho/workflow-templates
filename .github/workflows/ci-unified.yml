# Unified Continuous Integration Workflow
# Filename: .github/workflows/ci-unified.yml
# Purpose: Handles CI for various branches, including versioning, build, test, package,
#          and triggering CD for DEV environment.

name: Unified CI

on:
  workflow_call:
    inputs:
      logLevel:
        description: 'Log level for the CI process'
        required: false
        type: string # Even if conceptually a choice, workflow_call inputs are string, boolean, or number
        default: 'warning'
      # Potentially add other inputs if parts of this CI pipeline should be configurable by the caller
      # For example:
      # solution_path:
      #   description: 'Path to the .sln file for the build'
      #   required: false
      #   type: string
      #   default: '**/*.sln' # Default to how it's used in version_and_build job
      # dotnet_version_to_use:
      #   description: 'Specific .NET SDK version to use for build/test'
      #   required: false
      #   type: string
      #   default: '8.0.x' # Default to how it's used in version_and_build job

    secrets:
      NUGET_FEED_AUTH_TOKEN_CI:
        description: 'Optional NuGet feed authentication token for restoring packages during CI.'
        required: false
      WORKFLOW_DISPATCH_PAT:
        description: 'PAT with workflow write scope, required to trigger the DEV deployment workflow.'
        required: true # This is used in the trigger_dev_deployment job
      SLACK_WEBHOOK_URL_CI:
        description: 'Slack Webhook URL for CI notifications.'
        required: false # Set to true if notifications are mandatory

permissions:
  contents: read      # To checkout code
  actions: write       # To trigger cd-dev-environment.yml via workflow_dispatch (if this reusable workflow still does that directly)
                       # Or, if the calling workflow should handle triggering other workflows, this might change.
  # packages: write    # If this workflow were to directly publish packages (but it uses reusable-publish-nuget)

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Example: Define a common variable for artifact storage if needed across jobs
  # ARTIFACT_STORAGE_PATH: './artifacts'

jobs:
  initialize_ci:
    name: Initialize CI & Determine Variables
    runs-on: ubuntu-latest
    outputs:
      is_main_branch: ${{ steps.determine_branch.outputs.is_main }}
      versioning_strategy: ${{ steps.determine_branch.outputs.version_strategy }}
      version_prerelease_suffix: ${{ steps.determine_branch.outputs.prerelease_suffix }}
      nuget_publish_feed_type: ${{ steps.determine_branch.outputs.nuget_feed_type }} # e.g., 'release' or 'prerelease'
      build_artifact_prefix: ${{ steps.determine_branch.outputs.artifact_prefix }} # e.g., 'release' or 'feature'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # For GitVersion or full history

      - name: Determine Branch Type and CI Variables
        id: determine_branch
        shell: bash
        run: |
          IS_MAIN="false"
          VERSION_STRATEGY="gitversion" # Default strategy
          PRERELEASE_SUFFIX=""
          NUGET_FEED_TYPE="prerelease" 
          ARTIFACT_PREFIX="feature" # Default prefix for artifacts

          REF_NAME="${{ github.ref_name }}" # e.g., main, feature/foo, hotfix/bar

          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            IS_MAIN="true"
            NUGET_FEED_TYPE="release"
            ARTIFACT_PREFIX="release"
            # No PRERELEASE_SUFFIX for main, GitVersion will handle release versioning
          elif [[ "$REF_NAME" == hotfix/* ]]; then
            # For hotfix branches, GitVersion might produce a suitable prerelease tag.
            # If specific suffix needed, it can be set here.
            # PRERELEASE_SUFFIX=$(echo "$REF_NAME" | sed 's|hotfix/||' | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-//g' | sed 's/-$//g')
            ARTIFACT_PREFIX="hotfix"
          else # feature, bugfix branches
            # For feature/bugfix, GitVersion will typically create a prerelease tag like 'alpha', 'beta' + branch name.
            # If an additional explicit suffix is desired, it can be constructed here.
            # PRERELEASE_SUFFIX=$(echo "$REF_NAME" | sed 's|feature/||' | sed 's|bugfix/||' | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-//g' | sed 's/-$//g')
            # if [[ -z "$PRERELEASE_SUFFIX" ]]; then PRERELEASE_SUFFIX="dev"; fi
            : # Using GitVersion's default prerelease naming for feature/bugfix
          fi
          
          echo "is_main=$IS_MAIN" >> $GITHUB_OUTPUT
          echo "version_strategy=$VERSION_STRATEGY" >> $GITHUB_OUTPUT
          echo "prerelease_suffix=$PRERELEASE_SUFFIX" >> $GITHUB_OUTPUT # This might be used by reusable-versioning if it supports appending
          echo "nuget_feed_type=$NUGET_FEED_TYPE" >> $GITHUB_OUTPUT
          echo "artifact_prefix=$ARTIFACT_PREFIX" >> $GITHUB_OUTPUT

  calculate_version:
    name: Calculate Version
    uses: ./.github/workflows/reusable-versioning.yml # Correctly call as a reusable workflow
    needs: initialize_ci
    secrets: inherit # Pass secrets if the reusable workflow needs them (e.g., GITHUB_TOKEN if reusable-versioning needs to checkout)
    with:
      strategy: ${{ needs.initialize_ci.outputs.versioning_strategy }}
      prerelease-suffix-override: ${{ needs.initialize_ci.outputs.version_prerelease_suffix }}
      fetch-depth: 0 # Assuming reusable-versioning.yml defines this input and handles checkout

  build_and_test_application: # New job for build/test
    name: Build, Test & Package Application
    uses: ./.github/workflows/reusable-build-test-dotnet.yml
    needs: [initialize_ci, calculate_version]
    secrets: # Pass necessary secrets
      NUGET_FEED_AUTH_TOKEN: ${{ secrets.NUGET_FEED_AUTH_TOKEN_CI }}
    with:
      solution-path: '**/*.sln'
      build-configuration: 'Release'
      dotnet-version-to-use: '9.0.x' # Or from input
      run-tests: true
      package-application: true
      publish-output-directory: './app-publish'
      artifact-name-prefix: ${{ needs.initialize_ci.outputs.build_artifact_prefix }}-${{ needs.calculate_version.outputs.calculated-version }}
      upload-build-artifacts: true
      upload-test-results-artifact: true
    # Outputs from reusable-build-test-dotnet.yml:
    # status, build-artifact-name, test-results-artifact-name, published-output-path

  prepare_nuget_artifacts_job:
    name: Prepare NuGet Artifacts
    runs-on: ubuntu-latest
    needs: [build_and_test_application]
    # if: needs.build_and_test_application.outputs.status == 'success'
    if: 1 == 'success'
    outputs:
      nuget_package_path: ./.nuget_packages # Output the path for the next job
    steps:
      - name: Download Published Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build_and_test_application.outputs.build-artifact-name }}
          path: ./.nuget_packages

  invoke_publish_nuget_reusable_workflow_job:
    name: Publish NuGet Packages (via Reusable Workflow)
    uses: ./.github/workflows/reusable-publish-nuget.yml
    needs: [initialize_ci, calculate_version, build_and_test_application, prepare_nuget_artifacts_job]
    if: needs.build_and_test_application.outputs.status == 'success' && needs.calculate_version.outputs.calculated-version != '' && needs.prepare_nuget_artifacts_job.outputs.nuget_package_path != ''
    secrets:
      NUGET_API_KEY: ${{ secrets.GITHUB_TOKEN }} # Assuming GITHUB_TOKEN for GitHub Packages
    with:
      working-directory: ${{ needs.prepare_nuget_artifacts_job.outputs.nuget_package_path }}
      package-path: '*.nupkg'
      version: ${{ needs.calculate_version.outputs.calculated-version }}
      nuget-feed-url: "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
      is-prerelease: ${{ needs.initialize_ci.outputs.is_main_branch == 'false' }}
      skip-duplicate: true
    # Outputs from reusable-publish-nuget.yml: status, published-packages, published-count
    # These are implicitly available as needs.invoke_publish_nuget_reusable_workflow_job.outputs.*

  trigger_dev_deployment:
    name: Trigger DEV Deployment
    runs-on: ubuntu-latest
    needs: [initialize_ci, calculate_version, build_and_test_application] # Adjusted dependencies
    if: needs.build_and_test_application.outputs.status == 'success'

    steps:
      - name: Dispatch DEV Deployment Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: unified-cd-workflow.yml
          repo: InwardEcho/workflow-templates
          token: ${{ secrets.WORKFLOW_DISPATCH_PAT }}
          ref: 'main'
          inputs: |
            {
              "version_to_deploy": "${{ needs.calculate_version.outputs.calculated-version }}",
              "source_artifact_name": "${{ needs.build_and_test_application.outputs.build-artifact-name }}",
              "target_environment_type": "dev"
            }

  gather_reporting_data_job:
    name: Gather Reporting Data
    runs-on: ubuntu-latest
    needs: [initialize_ci, calculate_version, build_and_test_application, invoke_publish_nuget_reusable_workflow_job, trigger_dev_deployment]
    if: always()
    outputs:
      final_ci_status: ${{ steps.calculate_overall_status.outputs.ci_status }}
      # Pass through other details needed by the notification job
      calculated_version_output: ${{ needs.calculate_version.outputs.calculated-version }}
      build_status_output: ${{ needs.build_and_test_application.outputs.status }}
      publish_status_output: ${{ needs.invoke_publish_nuget_reusable_workflow_job.outputs.status }}
      published_count_output: ${{ needs.invoke_publish_nuget_reusable_workflow_job.outputs.published-count }}
      deploy_trigger_result_output: ${{ needs.trigger_dev_deployment.result }}

    steps:
      - name: Calculate CI Overall Status
        id: calculate_overall_status
        run: |
          BUILD_STATUS="${{ needs.build_and_test_application.outputs.status }}"
          PUBLISH_STATUS="${{ needs.invoke_publish_nuget_reusable_workflow_job.outputs.status }}"
          IS_PUBLISH_OK="false"
          if [[ "$PUBLISH_STATUS" == "success" || "$PUBLISH_STATUS" == "skipped" ]]; then
            IS_PUBLISH_OK="true"
          fi

          DEPLOY_RESULT="${{ needs.trigger_dev_deployment.result }}"
          IS_DEPLOY_OK="false"
          if [[ "$DEPLOY_RESULT" == "success" || "$DEPLOY_RESULT" == "skipped" ]]; then
            IS_DEPLOY_OK="true"
          fi
          
          FINAL_CI_STATUS="failure"
          if [[ "$BUILD_STATUS" == "success" && "$IS_PUBLISH_OK" == "true" && "$IS_DEPLOY_OK" == "true" ]]; then
            FINAL_CI_STATUS="success"
          fi
          echo "ci_status=$FINAL_CI_STATUS" >> $GITHUB_OUTPUT

  send_notifications_job:
    name: Send CI Notifications
    uses: ./.github/workflows/reusable-observability-hooks.yml
    needs: [gather_reporting_data_job] # Depends on the job that calculates final status and gathers all data
    if: always()
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL_CI }}
    with:
      status: ${{ needs.gather_reporting_data_job.outputs.final_ci_status }}
      workflow-name: "${{ github.workflow }} on ${{ github.ref_name }}"
      branch-name: ${{ github.ref_name }}
      commit-sha: ${{ github.sha }}
      run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      message-details: |
        Version: `${{ needs.gather_reporting_data_job.outputs.calculated_version_output }}`
        Build & Test: `${{ needs.gather_reporting_data_job.outputs.build_status_output }}`
        NuGet Publish: `${{ needs.gather_reporting_data_job.outputs.publish_status_output || 'N/A' }}` (Published: `${{ needs.gather_reporting_data_job.outputs.published_count_output || 0 }}`)
        DEV Dispatch Trigger: `${{ needs.gather_reporting_data_job.outputs.deploy_trigger_result_output }}`
      notification-channel: 'slack' # Or make this an input to ci-unified.yml
      # Pass other inputs for reusable-observability-hooks.yml as needed
      # pr-number: ${{ github.event.pull_request.number }} # Example if for PR context