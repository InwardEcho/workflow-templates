# Unified Continuous Deployment Workflow
# Purpose: Consolidates DEV, TEST, and PROD deployment logic into a single workflow.
# Leverages GitHub Environments for secrets, approvals, and environment-specific configurations.

name: Unified CD Workflow

on:
  workflow_dispatch:
    inputs:
      version_to_deploy:
        description: 'Version to deploy (e.g., 1.2.3 or 1.2.3-feature-xyz.5)'
        required: true
        type: string
      source_artifact_name:
        description: 'Name of the build artifact to download (e.g., release-1.2.3-app-package)'
        required: true
        type: string
      target_environment_type:
        description: 'Logical environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - test
          - prod

permissions:
  contents: read      # To checkout code
  actions: write       # To trigger this workflow for promotions
  id-token: write      # For OIDC with cloud providers

concurrency:
  group: unified-cd-${{ github.event.inputs.target_environment_type }}-${{ github.event.inputs.version_to_deploy }}
  cancel-in-progress: false # Deployments, especially to test/prod, should complete or be explicitly cancelled

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Example of how a base URL could be structured if needed globally, though specific URLs are in environment blocks
  # BASE_DOMAIN: example.com

jobs:
  prepare_deployment_info:
    name: Prepare Deployment Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_info.outputs.version }}
      artifact_name: ${{ steps.get_info.outputs.artifact_name }}
      is_main_pipeline: ${{ steps.get_info.outputs.is_main_pipeline }}
      github_environment_name: ${{ steps.get_info.outputs.github_environment_name }}
      environment_url_var_name: ${{ steps.get_info.outputs.environment_url_var_name }} # e.g., DEV_ENVIRONMENT_URL
      azure_app_name_var_name: ${{ steps.get_info.outputs.azure_app_name_var_name }} # e.g., DEV_AZURE_APP_NAME

    steps:
      - name: Consolidate and Validate Trigger Info
        id: get_info
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version_to_deploy }}"
          ARTIFACT_NAME="${{ github.event.inputs.source_artifact_name }}"
          TARGET_ENV_TYPE="${{ github.event.inputs.target_environment_type }}"
          IS_MAIN_PIPELINE="false" # Default to string 'false'
          # Determine IS_MAIN_PIPELINE from artifact name prefix
          if [[ "$ARTIFACT_NAME" == release-* ]]; then
            IS_MAIN_PIPELINE="true"
          fi

          if [[ -z "$VERSION" || -z "$ARTIFACT_NAME" || -z "$TARGET_ENV_TYPE" ]]; then
            echo "::error::Version, Artifact Name, or Target Environment Type is missing. Cannot proceed."
            exit 1
          fi

          GITHUB_ENV_NAME=""
          ENV_URL_VAR_NAME=""
          AZURE_APP_NAME_VAR_NAME=""

          case "$TARGET_ENV_TYPE" in
            dev)
              GITHUB_ENV_NAME="Development"
              ENV_URL_VAR_NAME="DEV_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="DEV_AZURE_APP_NAME"
              ;;
            test)
              GITHUB_ENV_NAME="Test"
              ENV_URL_VAR_NAME="TEST_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="TEST_AZURE_APP_NAME"
              ;;
            prod)
              GITHUB_ENV_NAME="Production"
              ENV_URL_VAR_NAME="PROD_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="PROD_AZURE_APP_NAME"
              ;;
            *)
              echo "::error::Invalid target_environment_type: $TARGET_ENV_TYPE"
              exit 1
              ;;
          esac

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "is_main_pipeline=$IS_MAIN_PIPELINE" >> $GITHUB_OUTPUT
          echo "github_environment_name=$GITHUB_ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment_url_var_name=$ENV_URL_VAR_NAME" >> $GITHUB_OUTPUT
          echo "azure_app_name_var_name=$AZURE_APP_NAME_VAR_NAME" >> $GITHUB_OUTPUT

          echo "Deploying Version: $VERSION to $GITHUB_ENV_NAME"
          echo "Using Artifact: $ARTIFACT_NAME"
          echo "Is Main Pipeline (for DEV trigger): $IS_MAIN_PIPELINE"

  deploy_and_validate:
    name: Deploy to ${{ needs.prepare_deployment_info.outputs.github_environment_name }}
    runs-on: ubuntu-latest
    needs: prepare_deployment_info
    environment:
      name: ${{ needs.prepare_deployment_info.outputs.github_environment_name }}
      # Construct URL dynamically. Assumes vars like DEV_ENVIRONMENT_URL, TEST_ENVIRONMENT_URL, PROD_ENVIRONMENT_URL are defined in GitHub Variables.
      # Or, if a more complex pattern: format('https://{0}.example.com/app-{1}', inputs.target_environment_type, needs.prepare_deployment_info.outputs.version)
      url: ${{ vars[needs.prepare_deployment_info.outputs.environment_url_var_name] || format('https://{0}.example.com/app-{1}', github.event.inputs.target_environment_type, needs.prepare_deployment_info.outputs.version) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.prepare_deployment_info.outputs.artifact_name }}
          path: ./app-to-deploy

      - name: Apply Infrastructure (Terraform)
        id: terraform_apply # Give an id to reference outputs
        uses: ./.github/workflows/reusable-iac-terraform.yml
        with:
          working-directory: './Infra/${{ github.event.inputs.target_environment_type }}'
          terraform-command: 'apply'
          environment: ${{ github.event.inputs.target_environment_type }}
          var-file: 'terraform.${{ github.event.inputs.target_environment_type }}.tfvars'
          # Prod should not auto-approve. Dev/Test can.
          apply-auto-approve: ${{ github.event.inputs.target_environment_type == 'prod' && 'false' || 'true' }}
        secrets: # Corrected indentation
          # These secrets (AZURE_CLIENT_ID etc.) are expected to be defined with these exact names
          # but with different values scoped to each GitHub Environment ("Development", "Test", "Production").
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Apply Database Migrations
        id: db_migration # Give an id to reference outputs
        if: steps.terraform_apply.outputs.status == 'success' # Ensure terraform was successful
        uses: ./.github/workflows/reusable-database-migration-efcore.yml
        with:
          efcore-project-path: 'src/MyProject.DataAccess/MyProject.DataAccess.csproj' # Example, adjust to your project
          environment: ${{ github.event.inputs.target_environment_type }}
          connection-string: ${{ secrets.DB_CONNECTION_STRING }} # Scoped per GitHub Environment
          # Prod requires backup. Dev/Test do not.
          backup-required: ${{ github.event.inputs.target_environment_type == 'prod' && 'true' || 'false' }}
        secrets: # Corrected indentation
          _placeholder_for_secret_passing_to_reusable: "Ensure reusable workflow handles this correctly if it expects secrets directly"

      - name: Deploy Application
        id: app_deploy # Give an id to reference outputs
        if: steps.db_migration.outputs.status == 'success' # Ensure DB migration was successful
        # This step will be conditional based on environment type for strategy
        run: |
          echo "Preparing to deploy application to ${{ github.event.inputs.target_environment_type }}"
          # This echo is just a placeholder before the conditional reusable workflow calls

      - name: Deploy Application to PROD (Canary Strategy)
        id: app_deploy_prod_canary
        if: steps.app_deploy.conclusion == 'success' && github.event.inputs.target_environment_type == 'prod'
        uses: ./.github/workflows/reusable-canary-deployment.yml
        with:
          environment-name: 'prod' # Base name for canary slice identification
          artifact-path: './app-to-deploy'
          version: ${{ needs.prepare_deployment_info.outputs.version }}
          # These should be configured as GitHub Variables (repository or environment level)
          canary-percentage: ${{ vars.PROD_CANARY_PERCENTAGE || 10 }}
          observation-period-minutes: ${{ vars.PROD_CANARY_OBSERVATION_MINUTES || 30 }}
          health-check-url-pattern: ${{ vars.PROD_CANARY_HEALTH_CHECK_URL_PATTERN }} # e.g., https://prod-canary.example.com/api/health
          primary-deployment-target-type: 'azure-app-service' # Example
          # azure-app-name: ${{ vars[needs.prepare_deployment_info.outputs.azure_app_name_var_name] }} # For the main app service
          # Example target-specific inputs for canary and primary slots:
          # azure-app-name-production-slot: ${{ vars.PROD_AZURE_APP_NAME_SLOT_PROD }}
          # azure-app-name-canary-slot: ${{ vars.PROD_AZURE_APP_NAME_SLOT_CANARY }}
          rollback-on-failure: true
        secrets: # Corrected indentation
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }} # Scoped per GitHub Environment

      - name: Deploy Application to DEV/TEST (Direct Strategy)
        id: app_deploy_non_prod
        if: steps.app_deploy.conclusion == 'success' && (github.event.inputs.target_environment_type == 'dev' || github.event.inputs.target_environment_type == 'test')
        uses: ./.github/workflows/reusable-deploy-environment.yml
        with:
          environment-name: ${{ github.event.inputs.target_environment_type }}
          artifact-path: './app-to-deploy'
          deployment-target-type: 'azure-app-service' # Example
          version-being-deployed: ${{ needs.prepare_deployment_info.outputs.version }}
          azure-app-name: ${{ vars[needs.prepare_deployment_info.outputs.azure_app_name_var_name] }} # e.g., vars.DEV_AZURE_APP_NAME or vars.TEST_AZURE_APP_NAME
          # health-check-url: ${{ vars[format('{0}_HEALTH_CHECK_URL', needs.prepare_deployment_info.outputs.github_environment_name)] }} # e.g. vars.DEV_HEALTH_CHECK_URL
        secrets: # Corrected indentation
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }} # Scoped per GitHub Environment

  trigger_next_stage:
    name: Trigger Next Stage Deployment
    runs-on: ubuntu-latest
    needs: [prepare_deployment_info, deploy_and_validate]
    # Only run if the deployment was successful
    if: success() && needs.deploy_and_validate.result == 'success'

    steps:
      - name: Promote DEV to TEST
        if: github.event.inputs.target_environment_type == 'dev' && needs.prepare_deployment_info.outputs.is_main_pipeline == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ github.workflow }} # Triggers itself
          token: ${{ secrets.WORKFLOW_DISPATCH_PAT }} # PAT with repo scope to trigger workflows
          inputs: |
            {
              "version_to_deploy": "${{ needs.prepare_deployment_info.outputs.version }}",
              "source_artifact_name": "${{ needs.prepare_deployment_info.outputs.artifact_name }}",
              "target_environment_type": "test",
              "source_branch_is_main": "false"
            }
          ref: ${{ github.ref }}

      - name: Promote TEST to PROD
        if: github.event.inputs.target_environment_type == 'test'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ github.workflow }} # Triggers itself
          token: ${{ secrets.WORKFLOW_DISPATCH_PAT }}
          inputs: |
            {
              "version_to_deploy": "${{ needs.prepare_deployment_info.outputs.version }}",
              "source_artifact_name": "${{ needs.prepare_deployment_info.outputs.artifact_name }}",
              "target_environment_type": "prod",
              "source_branch_is_main": "false"
            }
          ref: ${{ github.ref }}

  report_cd_status:
    name: Report CD Status
    runs-on: ubuntu-latest
    needs: [prepare_deployment_info, deploy_and_validate]
    if: always() # Always run to report success or failure

    steps:
      - name: Determine Canary Status for Message
        id: get_canary_status
        # This assumes the canary reusable workflow outputs 'canary_status'
        # Accessing outputs from a conditionally run job/step needs care.
        # If deploy_and_validate.steps.app_deploy_prod_canary ran, its outputs are available.
        # A safer way might be to have the deploy_and_validate job output this.
        # For now, let's assume it's accessible if prod was targeted.
        run: |
          CANARY_MSG=""
          if [[ "${{ github.event.inputs.target_environment_type }}" == "prod" ]]; then
            # This is tricky because app_deploy_prod_canary is a step in another job.
            # We'd ideally pass this from the deploy_and_validate job's outputs.
            # For now, this is a placeholder for how one might try to construct it.
            # A better approach: deploy_and_validate job outputs `canary_outcome: ${{ steps.app_deploy_prod_canary.outputs.canary_status }}`
            # Then here: `needs.deploy_and_validate.outputs.canary_outcome`
            CANARY_MSG="Canary outcome: ${{ needs.deploy_and_validate.outputs.app_deploy_prod_canary_status || 'N/A' }}" # Placeholder name
          fi
          echo "canary_message=$CANARY_MSG" >> $GITHUB_OUTPUT

      - name: Notify CD Status
        uses: ./.github/workflows/reusable-observability-hooks.yml
        with:
          status: ${{ needs.deploy_and_validate.result }}
          workflow-name: "${{ github.workflow }} - ${{ github.event.inputs.target_environment_type }}"
          environment-name: ${{ needs.prepare_deployment_info.outputs.github_environment_name }}
          version-deployed: ${{ needs.prepare_deployment_info.outputs.version }}
          run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          message-details: "Deployment to ${{ github.event.inputs.target_environment_type }} status: ${{ needs.deploy_and_validate.result }}. ${{ steps.get_canary_status.outputs.canary_message }}"
          notification-channel: 'slack' # Or make this conditional/parameterized
        secrets: # Corrected indentation
          # SLACK_WEBHOOK_URL should be defined per GitHub Environment for different channels if needed
          # e.g., a general one for dev/test, a critical one for prod.
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}