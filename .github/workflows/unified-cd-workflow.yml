# Unified Continuous Deployment Workflow
# Purpose: Consolidates DEV, TEST, and PROD deployment logic into a single workflow.
# Leverages GitHub Environments for secrets, approvals, and environment-specific configurations.

name: Unified CD Workflow

on:
  workflow_call:
    inputs:
      version_to_deploy:
        description: 'Version to deploy (e.g., 1.2.3 or 1.2.3-feature-xyz.5)'
        required: true
        type: string
      source_artifact_name:
        description: 'Name of the build artifact to download (e.g., release-1.2.3-app-package)'
        required: true
        type: string
      target_environment_type:
        description: 'Logical environment to deploy to'
        required: true
        type: string
      db_migration_project_path:
        description: 'DB migration project path'
        required: true
        type: string
      

permissions:
  contents: read      # To checkout code
  actions: write       # To trigger this workflow for promotions
  id-token: write      # For OIDC with cloud providers

concurrency:
  group: unified-cd-${{ github.event.inputs.target_environment_type }}-${{ github.event.inputs.version_to_deploy }}
  cancel-in-progress: false # Deployments, especially to test/prod, should complete or be explicitly cancelled

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  # Example of how a base URL could be structured if needed globally, though specific URLs are in environment blocks
  # BASE_DOMAIN: example.com

jobs:
  prepare_deployment_info:
    name: Prepare Deployment Information
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_info.outputs.version }}
      artifact_name: ${{ steps.get_info.outputs.artifact_name }}
      is_main_pipeline: ${{ steps.get_info.outputs.is_main_pipeline }}
      github_environment_name: ${{ steps.get_info.outputs.github_environment_name }}
      environment_url_var_name: ${{ steps.get_info.outputs.environment_url_var_name }} # e.g., DEV_ENVIRONMENT_URL
      azure_app_name_var_name: ${{ steps.get_info.outputs.azure_app_name_var_name }} # e.g., DEV_AZURE_APP_NAME
    steps:
      - name: Consolidate and Validate Trigger Info
        id: get_info
        shell: bash
        run: |
          VERSION="${{ github.event.inputs.version_to_deploy }}"
          ARTIFACT_NAME="${{ github.event.inputs.source_artifact_name }}"
          TARGET_ENV_TYPE="${{ github.event.inputs.target_environment_type }}"
          IS_MAIN_PIPELINE="false" # Default to string 'false'
          # Determine IS_MAIN_PIPELINE from artifact name prefix
          if [[ "$ARTIFACT_NAME" == release-* ]]; then
            IS_MAIN_PIPELINE="true"
          fi

          if [[ -z "$VERSION" || -z "$ARTIFACT_NAME" || -z "$TARGET_ENV_TYPE" ]]; then
            echo "::error::Version, Artifact Name, or Target Environment Type is missing. Cannot proceed."
            exit 1
          fi

          GITHUB_ENV_NAME=""
          ENV_URL_VAR_NAME=""
          AZURE_APP_NAME_VAR_NAME=""

          case "$TARGET_ENV_TYPE" in
            dev)
              GITHUB_ENV_NAME="Development"
              ENV_URL_VAR_NAME="DEV_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="DEV_AZURE_APP_NAME"
              ;;
            test)
              GITHUB_ENV_NAME="Test"
              ENV_URL_VAR_NAME="TEST_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="TEST_AZURE_APP_NAME"
              ;;
            prod)
              GITHUB_ENV_NAME="Production"
              ENV_URL_VAR_NAME="PROD_ENVIRONMENT_URL"
              AZURE_APP_NAME_VAR_NAME="PROD_AZURE_APP_NAME"
              ;;
            *)
              echo "::error::Invalid target_environment_type: $TARGET_ENV_TYPE"
              exit 1
              ;;
          esac

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "is_main_pipeline=$IS_MAIN_PIPELINE" >> $GITHUB_OUTPUT
          echo "github_environment_name=$GITHUB_ENV_NAME" >> $GITHUB_OUTPUT
          echo "environment_url_var_name=$ENV_URL_VAR_NAME" >> $GITHUB_OUTPUT
          echo "azure_app_name_var_name=$AZURE_APP_NAME_VAR_NAME" >> $GITHUB_OUTPUT

          echo "Deploying Version: $VERSION to $GITHUB_ENV_NAME"
          echo "Using Artifact: $ARTIFACT_NAME"
          echo "Is Main Pipeline (for DEV trigger): $IS_MAIN_PIPELINE"

  call_terraform_apply:
    name: Apply Infrastructure (Terraform) via Reusable Workflow
    uses: ./.github/workflows/reusable-iac-terraform.yml
    needs: prepare_deployment_info
    with:
      working-directory: './Infra/${{ github.event.inputs.target_environment_type }}'
      terraform-command: 'apply'
      environment: ${{ github.event.inputs.target_environment_type }} # This is an input to the reusable workflow
      var-file: 'terraform.${{ github.event.inputs.target_environment_type }}.tfvars'
      apply-auto-approve: ${{ github.event.inputs.target_environment_type == 'dev' }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

  call_db_migration:
    name: Apply Database Migrations via Reusable Workflow
    uses: ./.github/workflows/reusable-database-migration-efcore.yml
    needs: [prepare_deployment_info, call_terraform_apply]
    if: needs.call_terraform_apply.outputs.status == 'success'
    with:
      efcore-project-path: ${{ github.event.inputs.db_migration_project_path }}
      environment: ${{ github.event.inputs.target_environment_type }} # This is an input to the reusable workflow
      backup-required: ${{ github.event.inputs.target_environment_type == 'prod' }}
    secrets:
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }} # Scoped per GitHub Environment

  call_app_deploy_prod_canary:
    name: Deploy Application to PROD (Canary) via Reusable Workflow
    uses: ./.github/workflows/reusable-canary-deployment.yml
    needs: [prepare_deployment_info, call_db_migration]
    if: needs.call_db_migration.outputs.status == 'success' && github.event.inputs.target_environment_type == 'prod'
    with:
      environment-name: 'prod' # Base name for canary slice identification
      artifact-path: ${{ needs.prepare_deployment_info.outputs.artifact_name }} # NOTE: This should be a path to a DOWNLOADED artifact
      version: ${{ needs.prepare_deployment_info.outputs.version }}
      canary-percentage: ${{ vars.PROD_CANARY_PERCENTAGE || 10 }}
      observation-period-minutes: ${{ vars.PROD_CANARY_OBSERVATION_MINUTES || 30 }}
      health-check-url-canary: ${{ vars.PROD_CANARY_HEALTH_CHECK_URL_PATTERN }} # Assuming this var holds the direct canary health check URL
      deployment-target-type: 'azure-app-service' # Corrected parameter name
      azure-app-name: ${{ vars[needs.prepare_deployment_info.outputs.azure_app_name_var_name] }} # Added required input for azure-app-service target
      rollback-on-failure: true
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }} # Corrected secret name

  call_app_deploy_non_prod:
    name: Deploy Application to DEV/TEST (Direct) via Reusable Workflow
    uses: ./.github/workflows/reusable-deploy-environment.yml
    needs: [prepare_deployment_info, call_db_migration]
    if: needs.call_db_migration.outputs.status == 'success' && github.event.inputs.target_environment_type != 'prod'
    with:
      environment-name: ${{ github.event.inputs.target_environment_type }}
      artifact-path: ${{ needs.prepare_deployment_info.outputs.artifact_name }} # NOTE: This should be a path to a DOWNLOADED artifact
      deployment-target-type: 'azure-app-service'
      version-being-deployed: ${{ needs.prepare_deployment_info.outputs.version }}
      azure-app-name: ${{ vars[needs.prepare_deployment_info.outputs.azure_app_name_var_name] }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS_APP_SERVICE }} # Corrected secret name

  trigger_next_stage:
    name: Trigger Next Stage Deployment
    runs-on: ubuntu-latest
    needs:
      - prepare_deployment_info
      - call_app_deploy_prod_canary
      - call_app_deploy_non_prod
    if: |
      (github.event.inputs.target_environment_type == 'prod' && needs.call_app_deploy_prod_canary.result == 'success') ||
      ((github.event.inputs.target_environment_type == 'dev' || github.event.inputs.target_environment_type == 'test') && needs.call_app_deploy_non_prod.result == 'success')
    steps:
      - name: Promote DEV to TEST
        if: github.event.inputs.target_environment_type == 'dev' && needs.prepare_deployment_info.outputs.is_main_pipeline == 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ github.workflow }}
          token: ${{ secrets.WORKFLOW_DISPATCH_PAT }}
          inputs: |
            {
              "version_to_deploy": "${{ needs.prepare_deployment_info.outputs.version }}",
              "source_artifact_name": "${{ needs.prepare_deployment_info.outputs.artifact_name }}",
              "target_environment_type": "test",
              "db_migration_project_path": "${{ github.event.inputs.db_migration_project_path }}"
            }
          ref: ${{ github.ref }}

      - name: Promote TEST to PROD
        if: github.event.inputs.target_environment_type == 'test'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: ${{ github.workflow }}
          token: ${{ secrets.WORKFLOW_DISPATCH_PAT }}
          inputs: |
            {
              "version_to_deploy": "${{ needs.prepare_deployment_info.outputs.version }}",
              "source_artifact_name": "${{ needs.prepare_deployment_info.outputs.artifact_name }}",
              "target_environment_type": "prod",
              "db_migration_project_path": "${{ github.event.inputs.db_migration_project_path }}"
            }
          ref: ${{ github.ref }}

  get_canary_report_info:
    name: Get Canary Report Info
    runs-on: ubuntu-latest
    needs:
      - prepare_deployment_info
      - call_app_deploy_prod_canary
    if: always() && (github.event.inputs.target_environment_type == 'prod')
    outputs:
      canary_message: ${{ steps.get_status.outputs.canary_message }}
    steps:
      - name: Determine Canary Status for Message
        id: get_status
        shell: bash
        run: |
          CANARY_MSG=""
          PROD_CANARY_JOB_RESULT="${{ needs.call_app_deploy_prod_canary.result }}"
          PROD_CANARY_JOB_OUTPUT_STATUS="${{ needs.call_app_deploy_prod_canary.outputs.canary_status }}"

          if [[ "$PROD_CANARY_JOB_RESULT" == "success" ]]; then
            CANARY_MSG="Canary outcome: ${PROD_CANARY_JOB_OUTPUT_STATUS:-'Succeeded, status not reported'}"
          elif [[ "$PROD_CANARY_JOB_RESULT" == "failure" ]]; then
            CANARY_MSG="Canary outcome: ${PROD_CANARY_JOB_OUTPUT_STATUS:-'Failed, status not reported'}"
          elif [[ "$PROD_CANARY_JOB_RESULT" == "skipped" ]]; then
            CANARY_MSG="Canary deployment was skipped."
          elif [[ "$PROD_CANARY_JOB_RESULT" == "cancelled" ]]; then
            CANARY_MSG="Canary deployment was cancelled."
          else
            CANARY_MSG="Canary outcome: N/A (Prod canary job status: ${PROD_CANARY_JOB_RESULT:-'unknown'})"
          fi
          echo "Generated Canary Message for report: $CANARY_MSG"
          echo "canary_message=$CANARY_MSG" >> $GITHUB_OUTPUT

  call_observability_hooks:
    name: Report CD Status via Reusable Workflow
    uses: ./.github/workflows/reusable-observability-hooks.yml
    needs:
      - prepare_deployment_info
      - call_terraform_apply
      - call_db_migration
      - call_app_deploy_prod_canary
      - call_app_deploy_non_prod
      - get_canary_report_info
    if: always() && (github.secret_SLACK_WEBHOOK_URL != '')
    with:
      status: |
        ${{ ((github.event.inputs.target_environment_type == 'prod' && needs.call_app_deploy_prod_canary.result == 'success') ||
             (github.event.inputs.target_environment_type != 'prod' && needs.call_app_deploy_non_prod.result == 'success')) &&
             'success' || 'failure' }}
      workflow-name: "${{ github.workflow }} - ${{ github.event.inputs.target_environment_type }}"
      environment-name: ${{ needs.prepare_deployment_info.outputs.github_environment_name }}
      version-deployed: ${{ needs.prepare_deployment_info.outputs.version }}
      run-url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      message-details: |
        Deployment to ${{ needs.prepare_deployment_info.outputs.github_environment_name }} status: ${{ 
          ((github.event.inputs.target_environment_type == 'prod' && needs.call_app_deploy_prod_canary.result == 'success') ||
             (github.event.inputs.target_environment_type != 'prod' && needs.call_app_deploy_non_prod.result == 'success')) &&
             'success' || 'failure'
        }}. ${{ 
          (github.event.inputs.target_environment_type == 'prod' && needs.get_canary_report_info.outputs.canary_message) 
          || 'Canary deployment not applicable for this environment.' 
        }}
      notification-channel: 'slack'
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}